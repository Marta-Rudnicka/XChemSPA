# Generated by Django 3.1.5 on 2021-05-26 12:12

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Compounds',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('smiles', models.CharField(blank=True, max_length=255, null=True)),
                ('code', models.CharField(blank=True, max_length=32, null=True)),
                ('log_p', models.FloatField(blank=True, null=True)),
                ('mol_wt', models.FloatField(blank=True, null=True)),
                ('heavy_atom_count', models.IntegerField(blank=True, null=True)),
                ('heavy_atom_mol_wt', models.FloatField(blank=True, null=True)),
                ('nhoh_count', models.IntegerField(blank=True, null=True)),
                ('no_count', models.IntegerField(blank=True, null=True)),
                ('num_h_acceptors', models.IntegerField(blank=True, null=True)),
                ('num_h_donors', models.IntegerField(blank=True, null=True)),
                ('num_het_atoms', models.IntegerField(blank=True, null=True)),
                ('num_rot_bonds', models.IntegerField(blank=True, null=True)),
                ('num_val_electrons', models.IntegerField(blank=True, null=True)),
                ('ring_count', models.IntegerField(blank=True, null=True)),
                ('tpsa', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CrystalPlate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='new_plate', max_length=100)),
                ('drop_volume', models.FloatField(blank=True, null=True)),
                ('plate_type', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('for_industry', models.BooleanField(default=False)),
                ('public', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='LibraryPlate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('barcode', models.CharField(blank=True, max_length=100, null=True)),
                ('current', models.BooleanField(default=True)),
                ('last_tested', models.DateField(auto_now=True)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='plates', to='API.library')),
            ],
        ),
        migrations.CreateModel(
            name='LibrarySubset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('origin', models.CharField(blank=True, max_length=64, null=True)),
                ('compounds', models.ManyToManyField(blank=True, to='API.Compounds')),
                ('library', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='API.library')),
            ],
        ),
        migrations.CreateModel(
            name='Proposals',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proposal', models.CharField(max_length=255, unique=True)),
                ('title', models.CharField(blank=True, max_length=10, null=True)),
                ('fedids', models.TextField(blank=True, null=True)),
                ('industry_user', models.BooleanField(default=True)),
                ('libraries', models.ManyToManyField(blank=True, to='API.Library')),
            ],
        ),
        migrations.CreateModel(
            name='Protein',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('space_group', models.CharField(blank=True, max_length=100, null=True)),
                ('a', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('b', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('c', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('alpha', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('beta', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('gamma', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SolventBatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(default=0)),
                ('soak_status', models.CharField(blank=True, max_length=64, null=True)),
                ('soak_time', models.IntegerField(blank=True, null=True)),
                ('cryo_status', models.CharField(blank=True, max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('solventbatch_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='API.solventbatch')),
                ('solv_frac', models.FloatField(blank=True, null=True)),
                ('stock_conc', models.FloatField(blank=True, null=True)),
                ('cryo_frac', models.FloatField(blank=True, null=True)),
                ('cryo_stock_frac', models.FloatField(blank=True, null=True)),
                ('cryo_location', models.CharField(blank=True, max_length=4, null=True)),
                ('soak_vol', models.FloatField(blank=True, null=True)),
                ('expr_conc', models.FloatField(blank=True, null=True)),
                ('cryo_transfer_vol', models.FloatField(blank=True, null=True)),
                ('crystal_plate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='API.crystalplate')),
            ],
            options={
                'abstract': False,
            },
            bases=('API.solventbatch', models.Model),
        ),
        migrations.CreateModel(
            name='Visit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visit_name', models.CharField(blank=True, max_length=32, null=True)),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.proposals')),
            ],
        ),
        migrations.CreateModel(
            name='SpaCompound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('library_name', models.CharField(max_length=100)),
                ('library_plate', models.CharField(max_length=100)),
                ('well', models.CharField(max_length=4)),
                ('code', models.CharField(max_length=100)),
                ('smiles', models.CharField(max_length=256)),
                ('visit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='API.visit')),
            ],
        ),
        migrations.CreateModel(
            name='SourceWell',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('well', models.CharField(blank=True, max_length=4, null=True)),
                ('concentration', models.IntegerField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('deactivation_date', models.DateField(blank=True, null=True)),
                ('compound', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='API.compounds')),
                ('library_plate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compounds', to='API.libraryplate')),
            ],
        ),
        migrations.CreateModel(
            name='SolventTestingData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solv_frac', models.FloatField(blank=True, null=True)),
                ('stock_conc', models.FloatField(blank=True, null=True)),
                ('cryo_frac', models.FloatField(blank=True, null=True)),
                ('cryo_stock_frac', models.FloatField(blank=True, null=True)),
                ('cryo_location', models.CharField(blank=True, max_length=4, null=True)),
                ('soak_vol', models.FloatField(blank=True, null=True)),
                ('expr_conc', models.FloatField(blank=True, null=True)),
                ('cryo_transfer_vol', models.FloatField(blank=True, null=True)),
                ('solvent_name', models.CharField(blank=True, max_length=64, null=True)),
                ('batch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='API.solventbatch')),
                ('crystal_plate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='API.crystalplate')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SolventNotes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solvent', models.CharField(blank=True, max_length=32, null=True)),
                ('solvent_concentration', models.FloatField(blank=True, null=True)),
                ('soak_time', models.DurationField(blank=True, null=True)),
                ('cryo', models.CharField(blank=True, max_length=32, null=True)),
                ('cryo_concentration', models.FloatField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.proposals')),
            ],
        ),
        migrations.CreateModel(
            name='SoakdbFiles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=255, unique=True)),
                ('modification_date', models.BigIntegerField()),
                ('visit', models.TextField()),
                ('status', models.IntegerField(blank=True, null=True)),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.proposals')),
            ],
            options={
                'db_table': 'soakdb_files',
            },
        ),
        migrations.AddField(
            model_name='proposals',
            name='protein',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='API.protein'),
        ),
        migrations.AddField(
            model_name='proposals',
            name='subsets',
            field=models.ManyToManyField(blank=True, to='API.LibrarySubset'),
        ),
        migrations.CreateModel(
            name='Preset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=64, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('subsets', models.ManyToManyField(blank=True, to='API.LibrarySubset')),
            ],
        ),
        migrations.CreateModel(
            name='Crystal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('crystal_name', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('product', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('PP', 'preprocessing'), ('PD', 'pandda'), ('RE', 'refinement'), ('CC', 'comp_chem'), ('DP', 'deposition')], default='PP', max_length=2)),
                ('well', models.CharField(blank=True, max_length=4, null=True)),
                ('echo_x', models.IntegerField(blank=True, null=True)),
                ('echo_y', models.IntegerField(blank=True, null=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('crystal_plate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='API.crystalplate')),
                ('soakdb_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='API.soakdbfiles')),
                ('visit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='API.visit')),
            ],
            options={
                'unique_together': {('crystal_name', 'visit', 'product')},
            },
        ),
        migrations.CreateModel(
            name='CompoundCombination',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(blank=True, null=True)),
                ('related_crystals', models.CharField(blank=True, max_length=64, null=True)),
                ('compounds', models.ManyToManyField(to='API.SpaCompound')),
                ('visit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='API.visit')),
            ],
        ),
        migrations.CreateModel(
            name='Lab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_collection_visit', models.CharField(blank=True, max_length=64, null=True)),
                ('harvest_status', models.CharField(blank=True, max_length=64, null=True)),
                ('mounting_result', models.CharField(blank=True, max_length=64, null=True)),
                ('mounting_time', models.CharField(blank=True, max_length=64, null=True)),
                ('visit', models.CharField(blank=True, max_length=64, null=True)),
                ('puck', models.CharField(blank=True, max_length=100, null=True)),
                ('position', models.CharField(blank=True, max_length=100, null=True)),
                ('pin_barcode', models.CharField(blank=True, max_length=100, null=True)),
                ('arrival_time', models.DateTimeField(blank=True, null=True)),
                ('mounted_timestamp', models.DateTimeField(blank=True, null=True)),
                ('ispyb_status', models.CharField(blank=True, max_length=100, null=True)),
                ('compound_combination', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='API.compoundcombination')),
                ('crystal_name', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='API.crystal')),
                ('single_compound', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='API.spacompound')),
                ('solvent_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='API.solventtestingdata')),
                ('batch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='API.batch')),
            ],
        ),
    ]
